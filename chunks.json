["CS 101: Introduction to Python Programming\nSpring 2025", "Course Description:\nThis course introduces fundamental programming concepts using Python. Students will learn software development through hands-on coding, projects, and collaborative work.", "Instructor: Dr. Sarah Chen\nOffice: Tech Building 3.415\nOffice Hours: Mon/Wed 2-4pm, or by appointment\nEmail: schen@university.edu", "Teaching Assistants:\n- Alex Kumar (Head TA): akumar@university.edu\n- Maria Garcia: mgarcia@university.edu\n- James Wilson: jwilson@university.edu", "Course Schedule:\nWeek 1-2: Python Basics\n- Variables, data types, and operators\n- Control structures\n- Functions and modules", "Week 3-4: Data Structures\n- Lists, tuples, and dictionaries\n- String manipulation\n- File I/O", "Week 5-6: Object-Oriented Programming\n- Classes and objects\n- Inheritance and polymorphism\n- Error handling", "Week 7-8: Advanced Topics\n- Regular expressions\n- Database connectivity\n- GUI programming with tkinter", "Week 9-10: Web Development\n- Flask framework basics\n- RESTful APIs\n- Database integration", "Week 11-12: Final Project\n- Team formation\n- Project proposals\n- Implementation and testing", "Grading:\n- Homework Assignments (40%)\n- Midterm Exam (25%)\n- Final Project (25%)\n- Class Participation (10%)", "Required Materials:\n- \"Python Programming: An Introduction to Computer Science\" 4th Edition\n- Laptop with Python 3.10+ installed\n- PyCharm Professional (free student license)", "@123 [Homework 2 Clarification]\nStudent: In problem 3 of homework 2, should we use a list or a dictionary to store the frequency counts?\nInstructor: Either data structure would work, but a dictionary would be more efficient since we need to look up counts frequently. The choice won't affect your grade as long as your solution works correctly.\n[Endorsed by instructor]", "@124 [Project Team Formation]\nStudent: I'm looking for team members for the final project who are interested in building a machine learning application.\nStudent Response: I'd be interested! I have some experience with scikit-learn.\nTA Response: Great initiative! Please remember to submit your team registration by Friday.", "@125 [Midterm Format]\nStudent: Will the midterm cover GUI programming?\nInstructor: No, the midterm will only cover material through Week 6 (Object-Oriented Programming). GUI programming will be on the final project only.\nFollow-up: Will we need to write code on paper?\nTA Response: The exam will be on computers in the lab, but no internet access will be allowed.", "@126 [Installation Issues]\nStudent: I'm getting an ImportError when trying to install PyQt5. Any suggestions?\nTA Response: Make sure you're using pip to install: pip install PyQt5\nIf that doesn't work, try creating a new virtual environment first.\nStudent Response: That worked, thanks!", "@127 [OOP Concept Question]\nStudent: Can someone explain the difference between class methods and static methods?\nTA Response: Here's a quick breakdown:\n1. Class methods (using @classmethod) can access and modify class state\n2. Static methods (using @staticmethod) can't access class or instance state\nExample:\n```python\nclass Example:\n    count = 0\n    \n    @classmethod\n    def increment(cls):\n        cls.count += 1  # Can modify class state\n        \n    @staticmethod\n    def helper():\n        return \"I can't access class state\"\n```\n[Endorsed by instructor]", "@128 [Final Project Ideas]\nStudent: Is building a Twitter bot allowed for the final project?\nInstructor: Yes, that's acceptable. Make sure to include:\n1. Proper API authentication\n2. Rate limiting handling\n3. Error management\n4. Data storage\nStudent Follow-up: Would using MongoDB for storage be okay?\nTA Response: MongoDB is perfect for this use case.", "@129 [Homework 3 Extension]\nStudent: Due to the upcoming hackathon, could we get an extension on HW3?\nInstructor: Yes, I'll extend the deadline to next Wednesday for everyone.\n[Important announcement]", "@130 [Python Version]\nStudent: My code works on Python 3.9 but not 3.10. What version should we use?\nTA Response: Please use Python 3.10+ as specified in the syllabus. The main changes affecting our course are:\n1. Pattern matching syntax\n2. Better error messages\n3. New type union operators\nLet me know if you need help upgrading.", "\n@132 [Midterm Review Session]\nStudent: Will there be a review session before the midterm?\nInstructor: Yes, we\u2019ll have a review session on Monday at 5 PM in Room 101. Bring any questions!\nFollow-up: Will it be recorded?\nTA Response: Yes, we\u2019ll upload the recording to the course website.", "@133 [Project Proposal Feedback]\nStudent: Can we get feedback on our project proposals before submission?\nTA Response: Yes, post your proposal as a private note, and we\u2019ll provide feedback within 24 hours.", "@134 [Homework 4 Runtime Complexity]\nStudent: For Question 2, is an \ufffc solution acceptable?\nInstructor: You should aim for \ufffc or better. An \ufffc solution may not run efficiently for large inputs.", "@135 [Docker Issues]\nStudent: I\u2019m having trouble running the provided Docker container. It says port is already allocated. Any fixes?\nTA Response: Try stopping any existing containers with:", "docker ps\ndocker stop <container_id>", "Or use a different port by modifying the -p flag in your docker run command.", "@136 [Course Textbook]\nStudent: Is the textbook required for the final exam?\nInstructor: No, the exam will be based on lectures and assignments. The textbook is only for reference.", "@137 [Jupyter Notebook Not Saving]\nStudent: My Jupyter Notebook won\u2019t save changes. Any fixes?\nTA Response: Try restarting the Jupyter server and clearing the output:", "jupyter notebook stop\njupyter notebook --no-browser", "Also, check disk space with df -h.", "@138 [Pair Programming Rules]\nStudent: Can we collaborate on homework problems with a partner?\nInstructor: You may discuss concepts but must write your own code. Copying solutions is not allowed.", "@139 [Deadline Reminder]\nInstructor: Reminder: Project proposals are due by Friday at 11:59 PM. No late submissions will be accepted.\n[Important announcement]", "@140 [Extra Credit Opportunity]\nStudent: Are there any extra credit opportunities?\nInstructor: Yes! You can complete an optional research summary on AI ethics. Details are on the course website.", "\n@161 [Homework 2 - List vs Dictionary]\nStudent: For Homework 2, should we use a list or a dictionary to store word frequencies?\nInstructor: A dictionary is more efficient since lookups and updates are \ufffc on average, while a list requires searching for keys. However, either approach will receive full credit if implemented correctly.\n[Endorsed by instructor]", "@162 [Midterm Topics]\nStudent: Will the midterm include Flask or RESTful APIs?\nInstructor: No, the midterm will cover material through Week 6 (Object-Oriented Programming). Web development topics will be on the final project instead.", "@163 [File I/O in Homework 3]\nStudent: For Homework 3, should we read the entire file into memory or process it line by line?\nTA Response: If the file is small, reading the whole file is fine. But for larger files, it\u2019s better to process it line by line using:", "with open(\"data.txt\", \"r\") as file:\n    for line in file:\n        process(line)", "@164 [Final Project Team Formation]\nStudent: Looking for team members for the final project! I want to build a web app with Flask.\nStudent Response: I\u2019d be interested! I\u2019ve worked with Flask before.\nTA Response: Great! Remember to submit your team registration by Week 11.", "@165 [Installation Issues - PyCharm]\nStudent: PyCharm is showing an error saying \u201cPython interpreter not found.\u201d Any fixes?\nTA Response: Make sure you\u2019ve configured the interpreter:\n\t1.\tGo to File \u2192 Settings \u2192 Project Interpreter\n\t2.\tSelect Python 3.10+\n\t3.\tClick Apply and restart PyCharm", "@166 [Using tkinter for GUI]\nStudent: Are we required to use tkinter for the GUI project, or can we use another framework like PyQt?\nInstructor: The course covers tkinter, but you may use another GUI framework if you prefer. Just document your implementation properly.", "@167 [Debugging List Index Errors]\nStudent: My code throws an \u201cIndexError: list index out of range\u201d on my loop. What\u2019s wrong?\nTA Response: Check that your loop doesn\u2019t exceed the list\u2019s length. If iterating with range(len(my_list)), ensure your indices are valid:", "for i in range(len(my_list)):  \n    print(my_list[i])  # Ensure i < len(my_list)", "If using .pop(), be careful not to remove more items than exist.", "@168 [Database Integration Help]\nStudent: Do we need to use SQLite for the database integration in Homework 7, or can we use PostgreSQL?\nInstructor: SQLite is recommended because it\u2019s lightweight and doesn\u2019t require setup. However, you may use PostgreSQL if you document your setup properly.", "@169 [Regex Question]\nStudent: How do I write a regex pattern to match emails for Homework 6?\nTA Response: You can use:", "import re\npattern = r\"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\"\nre.match(pattern, \"test@example.com\")", "Make sure to test edge cases like \"name@sub.domain.com\".", "@170 [Flask Routes - Clarification]\nStudent: In Homework 8, should we use GET or POST for handling form submissions?\nInstructor: Use POST for form submissions when modifying data. GET should only be used for retrieving data. Example:", "@app.route('/submit', methods=['POST'])  \ndef submit_form():  \n    data = request.form['input_field']  \n    return f\"Received: {data}\"  ", "@171 [Final Exam Format]\nStudent: Will the final be open book?\nInstructor: No, but you are allowed one double-sided cheat sheet.", "@172 [Class Participation Grade]\nStudent: How is class participation graded?\nInstructor: Participation is based on engagement, attendance, and Piazza activity. Asking or answering questions counts towards your grade.", "@173 [Late Submission Policy]\nStudent: Can we submit Homework 4 late with a penalty?\nInstructor: No, late submissions are not accepted per the syllabus.", "@174 [Mac vs Windows for Development]\nStudent: Does it matter if I use Mac or Windows for this course?\nTA Response: Either is fine! Just make sure you have Python 3.10+ installed. Mac users may need to install additional dependencies via Homebrew (brew install <package>).", "@175 [Extra Office Hours Before Midterm]\nInstructor: Extra office hours will be held on Monday, 3-5 PM for midterm review. Bring any questions!", "@176 [Handling Exceptions in Python]\nStudent: Should we use try-except in every function?\nTA Response: Use try-except only where errors are expected. Catching exceptions everywhere may hide bugs. Example:", "try:  \n    result = int(input(\"Enter a number: \"))  \nexcept ValueError:  \n    print(\"Invalid input!\")  ", "@177 [Using APIs for Final Project]\nStudent: Are we allowed to use external APIs in our final project?\nInstructor: Yes, but make sure to handle API rate limits and authentication properly.", "@178 [Midterm Review Session]\nStudent: Will there be a midterm review session?\nInstructor: Yes, it will be held Friday at 4 PM in Tech Building 3.415.", "@179 [Python 3.10+ Features]\nStudent: What\u2019s new in Python 3.10+ that we should be aware of?\nTA Response:\n\t1.\tStructural Pattern Matching (match statements)\n\t2.\tMore readable error messages\n\t3.\tType hinting improvements\nMake sure to use Python 3.10+ for assignments!", "@180 [GitHub for Collaboration]\nStudent: Can we use GitHub for our final project?\nInstructor: Yes, but make sure your repo is private to avoid academic integrity issues.", "@181 [Homework 5 - OOP Best Practices]\nStudent: Should we use getters and setters in our classes for Homework 5?\nTA Response: While not required, getters and setters help with encapsulation. Example:", "class Student:\n    def __init__(self, name):\n        self._name = name\n    \n    def get_name(self):\n        return self._name", "    def set_name(self, new_name):\n        self._name = new_name", "Python also allows property decorators for a more elegant approach.", "@182 [Flask Debug Mode]\nStudent: Flask keeps showing an error. How can I enable debugging?\nTA Response: Run Flask with debug mode enabled:", "export FLASK_ENV=development  \nflask run", "This will show detailed error messages in the browser.", "@183 [Handling Large Files in Python]\nStudent: My program crashes when reading a large file. What\u2019s the best way to handle this?\nTA Response: Use a generator to process the file line by line instead of reading it all at once:", "def read_large_file(filename):\n    with open(filename, \"r\") as file:\n        for line in file:\n            yield line", "for line in read_large_file(\"bigfile.txt\"):\n    process(line)", "This prevents memory overload.", "@184 [Midterm Review Materials]\nStudent: Will we get a practice midterm?\nInstructor: Yes, a practice exam will be uploaded to the course website by Friday.", "@185 [Debugging Flask API Routes]\nStudent: My Flask API route keeps returning a 404 error. What could be wrong?\nTA Response: Make sure your function is properly decorated and you are using the correct URL format:", "@app.route('/hello', methods=['GET'])\ndef hello():\n    return \"Hello, World!\"", "Try running flask routes to list all registered routes.", "@186 [Working with JSON Data]\nStudent: How do we parse JSON responses from an API in Python?\nTA Response: Use the json module to convert JSON into Python dictionaries:", "import json\nimport requests", "response = requests.get(\"https://api.example.com/data\")\ndata = json.loads(response.text)\nprint(data[\"key\"])  # Access JSON fields", "@187 [Final Project Presentation Details]\nStudent: Will final projects be presented live or just submitted?\nInstructor: Each team will submit code and documentation but also give a 5-minute live demo in the last week of class.", "@188 [Recursion vs Iteration in HW6]\nStudent: Should we use recursion or iteration for the tree traversal in Homework 6?\nInstructor: Either works, but iteration is preferred for efficiency since Python has a recursion depth limit (~1000 calls).", "@189 [Tkinter Button Click Event]\nStudent: How do I make a button print text when clicked in tkinter?\nTA Response: Use the command parameter when creating the button:", "import tkinter as tk", "def on_click():\n    print(\"Button clicked!\")", "root = tk.Tk()\nbutton = tk.Button(root, text=\"Click Me\", command=on_click)\nbutton.pack()\nroot.mainloop()", "@190 [SQL vs NoSQL for Project]\nStudent: Should we use SQL or NoSQL for our final project database?\nInstructor: SQL (SQLite, PostgreSQL) is better for structured data. NoSQL (MongoDB) is better for flexible schemas. Choose based on your project\u2019s needs.", "@191 [Function Arguments in Python]\nStudent: What\u2019s the difference between *args and **kwargs?\nTA Response:\n\t\u2022\t*args allows passing multiple positional arguments.\n\t\u2022\t**kwargs allows passing multiple named arguments.", "Example:", "def example(*args, **kwargs):\n    print(\"Args:\", args)\n    print(\"Kwargs:\", kwargs)", "example(1, 2, 3, name=\"Alice\", age=25)", "@192 [Handling Exceptions in Flask]\nStudent: How can I handle errors in a Flask API?\nTA Response: Use error handlers for a clean response:", "@app.errorhandler(404)\ndef not_found(error):\n    return {\"error\": \"Not found\"}, 404", "@193 [Project Proposal Feedback]\nStudent: Can we get feedback on our final project proposal before submission?\nTA Response: Yes! Post it as a private note, and we\u2019ll provide feedback within 48 hours.", "@194 [Using SQLite in Python]\nStudent: How do we connect to an SQLite database in Python?\nTA Response: Use the sqlite3 module:", "import sqlite3\nconn = sqlite3.connect(\"database.db\")\ncursor = conn.cursor()\ncursor.execute(\"CREATE TABLE users (id INTEGER PRIMARY KEY, name TEXT)\")\nconn.commit()\nconn.close()", "@195 [RESTful API Authentication]\nStudent: Should we use API keys or JWT for authentication in our Flask project?\nInstructor: API keys are simple but JWT (JSON Web Token) is more secure for authentication in larger applications.", "@196 [Final Project Submission Deadline]\nInstructor: Reminder: Final projects are due on Friday at 11:59 PM. Late submissions will not be accepted.", "@197 [Pandas DataFrame Manipulation]\nStudent: How do I filter rows in a Pandas DataFrame?\nTA Response: Use .loc[] or .query():", "import pandas as pd", "df = pd.DataFrame({\"name\": [\"Alice\", \"Bob\"], \"age\": [25, 30]})\nfiltered_df = df.loc[df[\"age\"] > 25]\nprint(filtered_df)", "@198 [GitHub Collaboration]\nStudent: Can we use GitHub for the final project?\nInstructor: Yes, but make sure your repo is private to avoid plagiarism issues.", "@199 [Extra Credit Opportunity]\nStudent: Are there any extra credit opportunities?\nInstructor: You can complete an optional Python scripting challenge for +5% on your final project. Details are on Canvas.", "@200 [Using Unit Tests in Python]\nStudent: How do we write unit tests for our project?\nTA Response: Use Python\u2019s unittest module:", "import unittest", "def add(a, b):\n    return a + b", "class TestMath(unittest.TestCase):\n    def test_add(self):\n        self.assertEqual(add(2, 3), 5)", "if __name__ == \"__main__\":\n    unittest.main()", "\nGeneral Course Questions", "@201 [Course Syllabus Question]\nStudent: Will we be covering machine learning in this course?\nInstructor: No, this course focuses on fundamental programming concepts using Python. Machine learning is covered in CS302.", "@202 [Python 3.10+ Compatibility]\nStudent: My code works in Python 3.9 but not 3.10. What changed?\nTA Response: Python 3.10 introduced pattern matching, stricter type hinting, and removed deprecated features. Check the official Python 3.10 release notes.", "@203 [Best IDE for This Course]\nStudent: Do we have to use PyCharm, or can we use VSCode?\nInstructor: PyCharm is recommended since we have a free student license, but VSCode, Jupyter, or any Python-friendly IDE is fine.", "Homework & Project Help", "@204 [Homework 3 - String Manipulation]\nStudent: Should we use regex for extracting data from strings in HW3?\nTA Response: You can use regex, but built-in string methods like .split() or .replace() may be simpler.", "@205 [Final Project Requirements]\nStudent: Does our final project have to use a database?\nInstructor: No, but if your project involves persistent data storage, a database (SQLite, PostgreSQL) is recommended.", "@206 [Lists vs Tuples]\nStudent: What\u2019s the difference between a list and a tuple?\nTA Response:\n\t\u2022\tLists are mutable (can be changed).\n\t\u2022\tTuples are immutable (cannot be modified after creation).\nUse tuples for fixed data, and lists for dynamic collections.", "@207 [Using APIs for Final Project]\nStudent: Can we use external APIs in our project?\nInstructor: Yes, but document API authentication, rate limits, and any dependencies in your README.", "Debugging & Errors", "@208 [Flask 404 Error]\nStudent: My Flask route is returning a 404 error. What\u2019s wrong?\nTA Response: Check that your route is correctly defined:", "@app.route('/hello', methods=['GET'])\ndef hello():\n    return \"Hello, world!\"", "Run flask routes to list all active routes.", "@209 [FileNotFoundError]\nStudent: My code throws FileNotFoundError when trying to read a file.\nTA Response: Ensure the file exists in the same directory as your script, or provide an absolute path. Example:", "import os\nprint(os.getcwd())  # Check current directory", "@210 [ModuleNotFoundError]\nStudent: I get ModuleNotFoundError: No module named 'requests'.\nTA Response: Install the missing module using:", "pip install requests", "If using a virtual environment, ensure it\u2019s activated first.", "Data Structures & Algorithms", "@211 [Sorting Algorithms for HW5]\nStudent: Can we use Python\u2019s built-in sorted() for sorting in HW5?\nInstructor: Yes, sorted() is allowed and uses Timsort, which is \ufffc in worst case.", "@212 [Binary Search vs Linear Search]\nStudent: Should we use binary search for HW6?\nTA Response: Only if the list is sorted. Binary search is \ufffc, but requires sorting first.", "Flask & Web Development", "@213 [Flask vs Django]\nStudent: Can we use Django instead of Flask for the final project?\nInstructor: No, this course focuses on Flask since it\u2019s lightweight and better suited for small projects.", "@214 [Database Choice for Flask App]\nStudent: Should we use SQLite or PostgreSQL for our Flask app?\nTA Response: SQLite is easier to set up for small projects. PostgreSQL is better for larger, scalable apps.", "Git & Collaboration", "@215 [Git Merge Conflicts]\nStudent: How do I resolve a Git merge conflict?\nTA Response: Open the conflicting file, edit the changes, then:", "git add <file>\ngit commit -m \"Resolved merge conflict\"", "Run git merge --abort if you want to cancel the merge.", "@216 [GitHub Collaboration]\nStudent: Should we use GitHub for our final project?\nInstructor: Yes, but keep the repo private to avoid academic integrity violations.", "Advanced Topics & Extra Credit", "@217 [Extra Credit Opportunities]\nStudent: Is there any way to earn extra credit?\nInstructor: Yes! Completing the Python scripting challenge can earn +5% on the final project. Details are on Canvas.", "@218 [Concurrency in Python]\nStudent: What\u2019s the difference between threading and multiprocessing?\nTA Response:\n\t\u2022\tThreading: Best for I/O-bound tasks (e.g., file I/O, network requests).\n\t\u2022\tMultiprocessing: Best for CPU-bound tasks (e.g., number crunching).\nUse threading.Thread() or multiprocessing.Process().", "Exam & Deadline Reminders", "@219 [Midterm Review Session]\nInstructor: The midterm review session is scheduled for Friday at 3 PM in Tech Building 3.415. Bring your questions!", "@220 [Final Project Deadline]\nInstructor: Reminder: Final projects are due on Friday at 11:59 PM. No late submissions will be accepted.", "Python Basics & Syntax", "@221 [Integer Division in Python]\nStudent: Why does 5 / 2 return 2.5 but 5 // 2 returns 2?\nTA Response:\n\t\u2022\t/ performs floating-point division, always returning a decimal.\n\t\u2022\t// performs integer division, rounding down to the nearest whole number.", "@222 [Mutable vs Immutable Data Types]\nStudent: Why can\u2019t we modify a string in Python?\nTA Response: Strings are immutable, meaning they cannot be changed after creation. Lists, however, are mutable:", "s = \"hello\"\ns[0] = \"H\"  # \u274c This will throw an error", "Use .replace() to modify strings instead.", "@223 [Using List Comprehension]\nStudent: Can we use list comprehensions in HW3 instead of a for loop?\nInstructor: Yes, list comprehensions are allowed and often more efficient. Example:", "squared = [x**2 for x in range(10)]", "Data Structures & Algorithms", "@224 [Reversing a List]\nStudent: What\u2019s the fastest way to reverse a list?\nTA Response:\n\t\u2022\tUse slicing: my_list[::-1]\n\t\u2022\tUse .reverse(): my_list.reverse() (modifies in place)\n\t\u2022\tUse reversed(): list(reversed(my_list))", "@225 [Sorting Dictionaries]\nStudent: How do I sort a dictionary by values?\nTA Response: Use sorted() with a lambda function:", "my_dict = {\"a\": 3, \"b\": 1, \"c\": 2}\nsorted_dict = dict(sorted(my_dict.items(), key=lambda x: x[1]))", "@226 [Using Deques for Efficiency]\nStudent: Should I use a list or a deque for a queue?\nTA Response: Use collections.deque for better performance when inserting/removing from both ends:", "from collections import deque\nq = deque()\nq.append(1)  # O(1)\nq.popleft()  # O(1)", "Lists have O(n) time complexity for pop(0).", "Object-Oriented Programming (OOP)", "@227 [Difference Between __init__ and __new__]\nStudent: What\u2019s the difference between __init__ and __new__?\nTA Response:\n\t\u2022\t__new__ creates the instance (rarely used).\n\t\u2022\t__init__ initializes the instance (commonly used).\nExample:", "class Example:\n    def __new__(cls):\n        print(\"Creating instance\")\n        return super().__new__(cls)\n    \n    def __init__(self):\n        print(\"Initializing instance\")", "@228 [Method Overriding in Python]\nStudent: Can we override a parent class method in Python?\nTA Response: Yes, just redefine it in the child class:", "class Parent:\n    def greet(self):\n        return \"Hello from Parent\"", "class Child(Parent):\n    def greet(self):\n        return \"Hello from Child\"", "Call the parent\u2019s method with super().greet().", "Error Handling & Debugging", "@229 [Handling KeyErrors]\nStudent: How do I prevent a KeyError when accessing a dictionary?\nTA Response: Use .get() to return a default value instead of raising an error:", "value = my_dict.get(\"key\", \"default_value\")", "@230 [Debugging with print() vs logging]\nStudent: Should we use print() or logging for debugging?\nTA Response: print() is fine for quick debugging, but logging is better for production:", "import logging\nlogging.basicConfig(level=logging.DEBUG)\nlogging.debug(\"This is a debug message\")", "File Handling & OS Operations", "@231 [Reading Large Files Efficiently]\nStudent: How do I read a large file without running out of memory?\nTA Response: Use a generator instead of loading the entire file:", "def read_file(filename):\n    with open(filename) as f:\n        for line in f:\n            yield line", "for line in read_file(\"large_file.txt\"):\n    process(line)", "@232 [Checking If a File Exists]\nStudent: How do I check if a file exists before opening it?\nTA Response: Use os.path.exists():", "import os\nif os.path.exists(\"file.txt\"):\n    with open(\"file.txt\") as f:\n        print(f.read())", "Web Development with Flask", "@233 [Returning JSON in Flask]\nStudent: How do I return a JSON response in Flask?\nTA Response: Use jsonify():", "from flask import Flask, jsonify\napp = Flask(__name__)", "@app.route('/data')\ndef data():\n    return jsonify({\"name\": \"Alice\", \"age\": 25})", "@234 [Flask URL Parameters]\nStudent: How do I pass parameters in a Flask route?\nTA Response: Use URL variables:", "@app.route('/user/<username>')\ndef show_user(username):\n    return f\"Hello, {username}!\"", "Database & SQL", "@235 [SQL Injection Prevention]\nStudent: How do I prevent SQL injection in Python?\nTA Response: Use parameterized queries instead of string concatenation:", "cursor.execute(\"SELECT * FROM users WHERE username = ?\", (user_input,))", "@236 [Using SQLAlchemy]\nStudent: Can we use SQLAlchemy instead of raw SQL?\nInstructor: Yes, SQLAlchemy is allowed for database integration in your Flask project.", "Git & Version Control", "@237 [Reverting a Git Commit]\nStudent: How do I undo my last commit?\nTA Response: Use git reset if it\u2019s local:", "git reset --soft HEAD~1  # Undo commit but keep changes\ngit reset --hard HEAD~1  # Undo commit and discard changes", "Use git revert if it\u2019s already pushed.", "@238 [Cloning a Private GitHub Repo]\nStudent: How do I clone a private GitHub repo?\nTA Response: Use SSH or personal access tokens:", "git clone https://github.com/yourusername/private-repo.git", "Exams & Deadlines", "@239 [Midterm Exam Format]\nStudent: Will the midterm be multiple-choice or coding-based?\nInstructor: It will be a mix of short-answer conceptual questions and coding problems.", "@240 [Final Exam Cheat Sheet]\nStudent: Can we bring notes to the final exam?\nInstructor: Yes, you are allowed one double-sided cheat sheet.", "@241 [Late Submission Policy]\nStudent: What\u2019s the late submission policy for Homework 6?\nInstructor: No late submissions are accepted per the syllabus.", "Extra Credit & Miscellaneous", "@242 [Extra Office Hours Before Midterm]\nInstructor: I will hold extra office hours on Monday, 3\u20135 PM for midterm review.", "@243 [Python Easter Eggs]\nStudent: Are there any fun Python Easter eggs?\nTA Response: Yes! Try:", "import this  # Prints \"The Zen of Python\"\nimport antigravity  # Opens xkcd\u2019s Python comic", "Python Basics & Common Issues", "@244 [Why is NoneType not subscriptable?]\nStudent: I got this error: TypeError: 'NoneType' object is not subscriptable. What does it mean?\nTA Response: It means you\u2019re trying to index ([]) a variable that is None.\nCheck if a function is returning None instead of a list/dictionary. Example fix:", "data = my_function()\nif data is not None:\n    print(data[0])", "@245 [Difference Between is and ==]\nStudent: What\u2019s the difference between is and == in Python?\nTA Response:\n\t\u2022\t== checks value equality (5 == 5 \u2192 True)\n\t\u2022\tis checks memory location ([] is [] \u2192 False)", "Example:", "a = [1, 2, 3]\nb = [1, 2, 3]\nprint(a == b)  # True (same values)\nprint(a is b)  # False (different objects)", "@246 [Using the Walrus Operator]\nStudent: Can we use the walrus operator (:=) in this course?\nInstructor: Yes! Python 3.8+ introduced := for assignment expressions:", "if (n := len(my_list)) > 10:\n    print(f\"List has {n} elements!\")", "Data Structures & Algorithms", "@247 [When to Use Sets Instead of Lists]\nStudent: Should I use a set or a list to store unique items in HW4?\nTA Response: Use a set for fast lookups since checking membership is O(1), compared to O(n) in lists:", "unique_items = set([\"apple\", \"banana\", \"apple\"])  # Removes duplicates", "@248 [Heap vs Stack Memory]\nStudent: What\u2019s the difference between heap memory and stack memory in Python?\nTA Response:\n\t\u2022\tStack: Stores function calls & local variables (fast, but limited size).\n\t\u2022\tHeap: Stores objects & dynamic memory (larger, but slower).\nRecursion issues often stem from stack overflows.", "@249 [Lambda Functions in Python]\nStudent: Can we use lambda functions for HW5?\nInstructor: Yes, but only for simple functions. Example:", "square = lambda x: x ** 2\nprint(square(5))  # 25", "Error Handling & Debugging", "@250 [Catching Multiple Exceptions]\nStudent: How do I catch multiple exceptions in Python?\nTA Response: Use tuples in except:", "try:\n    x = int(\"hello\")\nexcept (ValueError, TypeError) as e:\n    print(\"Caught an error:\", e)", "@251 [Best Way to Debug Python Code]\nStudent: What\u2019s the best way to debug Python code?\nTA Response: Use pdb:", "python -m pdb my_script.py", "Or insert breakpoints:", "import pdb; pdb.set_trace()", "Flask & Web Development", "@252 [CORS Error in Flask]\nStudent: My frontend can\u2019t call my Flask API due to CORS issues. How do I fix this?\nTA Response: Use Flask-CORS:", "from flask_cors import CORS\nCORS(app)", "@253 [Difference Between Flask session and cookies]\nStudent: Should we use Flask sessions or cookies for storing user data?\nTA Response:\n\t\u2022\tSession: Stores data server-side (session['user'] = \"Alice\")\n\t\u2022\tCookies: Stores data client-side (less secure)", "Use sessions for sensitive data.", "Databases & SQL", "@254 [SQL JOIN vs NoSQL Queries]\nStudent: How do I join tables in SQLite?\nTA Response: Use JOIN:", "SELECT users.name, orders.amount\nFROM users\nJOIN orders ON users.id = orders.user_id;", "In NoSQL (MongoDB), you typically use embedding instead.", "@255 [Best Way to Store Passwords]\nStudent: How should we store passwords securely?\nTA Response: Use bcrypt for hashing:", "from bcrypt import hashpw, gensalt\nhashed = hashpw(b\"mypassword\", gensalt())", "Git & Version Control", "@256 [What\u2019s the Difference Between git pull and git fetch?]\nStudent: What\u2019s the difference between git pull and git fetch?\nTA Response:\n\t\u2022\tgit fetch: Gets updates but doesn\u2019t merge them.\n\t\u2022\tgit pull: Fetches & merges changes from remote.", "Use git fetch to preview changes before merging.", "@257 [Recovering Deleted Branch in Git]\nStudent: I accidentally deleted my branch. How do I recover it?\nTA Response: Run:", "git reflog\ngit checkout -b my_branch HEAD@{1}", "This restores the last known commit before deletion.", "Exams & Deadlines", "@258 [Midterm Exam Topics]\nStudent: What topics should we focus on for the midterm?\nInstructor: The midterm covers:\n\u2705 Python Basics (functions, loops, recursion)\n\u2705 OOP (classes, inheritance, polymorphism)\n\u2705 Data structures (lists, dictionaries, tuples)\n\u274c No Flask or databases (final project only)", "@259 [Final Exam Coding Section]\nStudent: Will we have to write code by hand for the final?\nInstructor: No, the exam will be taken on computers in the lab.", "Miscellaneous & Extra Credit", "@260 [Best Python Books for Further Learning]\nStudent: What books do you recommend for Python beyond this course?\nInstructor: Some great ones:\n\ud83d\udcd8 Fluent Python by Luciano Ramalho\n\ud83d\udcd7 Effective Python by Brett Slatkin\n\ud83d\udcd9 Automate the Boring Stuff with Python by Al Sweigart", "@261 [Python Easter Egg - import antigravity]\nStudent: Someone told me Python has a joke built in. Is that true?\nTA Response: Yes! Try:", "import antigravity", "It opens an XKCD comic in your browser.", "@262 [How to Write Cleaner Python Code]\nStudent: Any tips for writing cleaner Python code?\nTA Response: Follow PEP 8:\n\t\u2022\tUse meaningful variable names (total_price instead of tp)\n\t\u2022\tKeep functions short & focused\n\t\u2022\tUse list comprehensions instead of long loops", "Python Fundamentals & Common Issues", "@263 [Why does id() return different values?]\nStudent: I noticed that id(var) returns different values each time I run my code. Why?\nTA Response: id(var) gives the memory address of an object. If a variable is recreated, Python may allocate a new memory address. Example:", "a = 10\nprint(id(a))  # Memory address of '10'\na = 20\nprint(id(a))  # New memory address for '20'", "@264 [What does if __name__ == \"__main__\": do?]\nStudent: Why do some scripts use if __name__ == \"__main__\": at the bottom?\nTA Response: It ensures the script only runs when executed directly, not when imported as a module. Example:", "def main():\n    print(\"This only runs when executed directly!\")", "if __name__ == \"__main__\":\n    main()", "@265 [Python Aliasing & Copying Lists]\nStudent: Why does modifying one list affect another?\nTA Response: Assigning lists creates a reference, not a copy. Use copy() or deepcopy() to avoid this:", "a = [1, 2, 3]\nb = a  # This is a reference, not a copy\nb.append(4)\nprint(a)  # [1, 2, 3, 4]", "# To create a copy:\nc = a.copy()\nc.append(5)\nprint(a)  # Unchanged: [1, 2, 3, 4]", "Data Structures & Algorithms", "@266 [Stack vs Queue Differences]\nStudent: What\u2019s the difference between a stack and a queue?\nTA Response:\n\t\u2022\tStack (LIFO - Last In, First Out): Think of a stack of plates. Use append() and pop().\n\t\u2022\tQueue (FIFO - First In, First Out): Like a line at a store. Use collections.deque().", "Example:", "from collections import deque", "queue = deque()\nqueue.append(1)  # Enqueue\nqueue.popleft()  # Dequeue", "@267 [Time Complexity of Dictionary Operations]\nStudent: Is dictionary lookup really O(1)?\nTA Response: Yes, on average, but worst-case lookup is O(n) due to hash collisions.", "Example:", "d = {\"a\": 1, \"b\": 2}\nprint(d[\"a\"])  # O(1) lookup", "@268 [Finding the Most Frequent Element]\nStudent: What\u2019s the best way to find the most frequent item in a list?\nTA Response: Use collections.Counter:", "from collections import Counter", "data = [\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"banana\"]\nfreq = Counter(data)\nprint(freq.most_common(1))  # [('banana', 3)]", "Object-Oriented Programming (OOP)", "@269 [What\u2019s super() in Python?]\nStudent: What does super() do in a class?\nTA Response: super() calls parent class methods inside a child class. Example:", "class Parent:\n    def greet(self):\n        print(\"Hello from Parent\")", "class Child(Parent):\n    def greet(self):\n        super().greet()  # Calls Parent's greet()\n        print(\"Hello from Child\")", "c = Child()\nc.greet()", "@270 [Difference Between Composition & Inheritance]\nStudent: Should we use inheritance or composition in OOP?\nTA Response:\n\t\u2022\tInheritance: \u201cIs-a\u201d relationship (Car is-a Vehicle).\n\t\u2022\tComposition: \u201cHas-a\u201d relationship (Car has-a Engine).", "Example of composition:", "class Engine:\n    def start(self):\n        print(\"Engine started!\")", "class Car:\n    def __init__(self):\n        self.engine = Engine()", "c = Car()\nc.engine.start()  # Car has an Engine", "Flask & Web Development", "@271 [Flask Auto-reload Not Working]\nStudent: My Flask app doesn\u2019t reload automatically. What\u2019s wrong?\nTA Response: Make sure debug mode is enabled:", "export FLASK_ENV=development\nflask run", "@272 [Flask Handling File Uploads]\nStudent: How do I upload files in Flask?\nTA Response: Use request.files:", "from flask import Flask, request", "app = Flask(__name__)", "@app.route(\"/upload\", methods=[\"POST\"])\ndef upload():\n    file = request.files[\"file\"]\n    file.save(f\"./uploads/{file.filename}\")\n    return \"File saved!\"", "Database & SQL", "@273 [SQL GROUP BY Explained]\nStudent: What does GROUP BY do in SQL?\nTA Response: It groups rows with the same values and applies aggregate functions. Example:", "SELECT department, COUNT(*) FROM employees GROUP BY department;", "@274 [SQLite vs PostgreSQL]\nStudent: Should I use SQLite or PostgreSQL?\nInstructor:\n\t\u2022\tSQLite: Best for small, local projects.\n\t\u2022\tPostgreSQL: Best for production, supports complex queries.", "Git & Version Control", "@275 [Undoing git commit --amend]\nStudent: I used git commit --amend but need to undo it. How?\nTA Response:", "git reset --soft HEAD@{1}", "This restores your previous commit message.", "@276 [Git Stash Use Case]\nStudent: When should I use git stash?\nTA Response: Use it when you want to save changes temporarily without committing.", "git stash   # Saves changes\ngit stash pop   # Restores changes", "Exams & Deadlines", "@277 [Final Exam Allowed Materials]\nStudent: Can we use external libraries during the final exam?\nInstructor: Only built-in Python libraries (e.g., math, random, datetime) are allowed.", "@278 [Late Submission Grace Period]\nStudent: Is there a grace period for submitting homework?\nInstructor: No, but Canvas allows a 5-minute buffer in case of last-minute uploads.", "Extra Credit & Miscellaneous", "@279 [Extra Credit for Open Source Contributions]\nStudent: Can contributing to an open-source project count for extra credit?\nInstructor: Yes! Submit a GitHub pull request link for approval.", "@280 [Best Python Podcasts & Blogs]\nStudent: Any good Python podcasts or blogs to follow?\nTA Response:\n\ud83c\udf99\ufe0f Talk Python To Me (Podcast)\n\ud83d\udcd6 Real Python (Blog)\n\ud83d\udcfa Corey Schafer YouTube", "Lecture 5: Object-Oriented Programming Deep Dive", "Key Concepts:", "1. Encapsulation\n- Private vs public attributes\n- Name mangling with double underscores\n- Property decorators for getter/setter methods", "Example:\n```python\nclass BankAccount:\n    def __init__(self):\n        self.__balance = 0  # Private attribute\n        \n    @property\n    def balance(self):\n        return self.__balance\n        \n    @balance.setter\n    def balance(self, value):\n        if value >= 0:\n            self.__balance = value\n        else:\n            raise ValueError(\"Balance cannot be negative\")\n```", "2. Inheritance\n- Single and multiple inheritance\n- Method resolution order (MRO)\n- Super() function usage", "Example:\n```python\nclass Animal:\n    def speak(self):\n        pass", "class Dog(Animal):\n    def speak(self):\n        return \"Woof!\"", "class Robot:\n    def charge(self):\n        pass", "class RobotDog(Dog, Robot):\n    pass\n```", "3. Polymorphism\n- Method overriding\n- Duck typing\n- Abstract base classes", "Practice Problems:", "1. Create a Shape class hierarchy with methods for area and perimeter\n2. Implement a simple banking system with different account types\n3. Design a playlist system with different media types", "Common Pitfalls:\n- Forgetting to call super().__init__()\n- Circular inheritance\n- Multiple inheritance diamond problem", "Best Practices:\n1. Follow the Single Responsibility Principle\n2. Use composition over inheritance when possible\n3. Keep inheritance hierarchies shallow\n4. Document class interfaces clearly"]